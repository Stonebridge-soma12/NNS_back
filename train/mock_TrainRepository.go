// Code generated by mockery v2.9.4. DO NOT EDIT.

package train

import mock "github.com/stretchr/testify/mock"

// MockTrainRepository is an autogenerated mock type for the TrainRepository type
type MockTrainRepository struct {
	mock.Mock
}

// CountCurrentTraining provides a mock function with given fields: userId
func (_m *MockTrainRepository) CountCurrentTraining(userId int64) (int, error) {
	ret := _m.Called(userId)

	var r0 int
	if rf, ok := ret.Get(0).(func(int64) int); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: opts
func (_m *MockTrainRepository) Delete(opts ...Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...Option) error); ok {
		r0 = rf(opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: opts
func (_m *MockTrainRepository) Find(opts ...Option) (Train, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 Train
	if rf, ok := ret.Get(0).(func(...Option) Train); ok {
		r0 = rf(opts...)
	} else {
		r0 = ret.Get(0).(Train)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...Option) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: opts
func (_m *MockTrainRepository) FindAll(opts ...Option) ([]Train, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []Train
	if rf, ok := ret.Get(0).(func(...Option) []Train); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Train)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...Option) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindNextTrainNo provides a mock function with given fields: userId
func (_m *MockTrainRepository) FindNextTrainNo(userId int64) (int64, error) {
	ret := _m.Called(userId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: train
func (_m *MockTrainRepository) Insert(train Train) (int64, error) {
	ret := _m.Called(train)

	var r0 int64
	if rf, ok := ret.Get(0).(func(Train) int64); ok {
		r0 = rf(train)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(Train) error); ok {
		r1 = rf(train)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: train, opts
func (_m *MockTrainRepository) Update(train Train, opts ...Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, train)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(Train, ...Option) error); ok {
		r0 = rf(train, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
