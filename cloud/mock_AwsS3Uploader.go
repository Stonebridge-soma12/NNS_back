// Code generated by mockery v2.9.4. DO NOT EDIT.

package cloud

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"
)

// MockAwsS3Uploader is an autogenerated mock type for the AwsS3Uploader type
type MockAwsS3Uploader struct {
	mock.Mock
}

// UploadBytes provides a mock function with given fields: file, options
func (_m *MockAwsS3Uploader) UploadBytes(file []byte, options ...Option) (string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, file)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func([]byte, ...Option) string); ok {
		r0 = rf(file, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, ...Option) error); ok {
		r1 = rf(file, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadFile provides a mock function with given fields: file, options
func (_m *MockAwsS3Uploader) UploadFile(file multipart.File, options ...Option) (string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, file)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(multipart.File, ...Option) string); ok {
		r0 = rf(file, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(multipart.File, ...Option) error); ok {
		r1 = rf(file, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
